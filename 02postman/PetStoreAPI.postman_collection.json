{
	"info": {
		"_postman_id": "83e98cfc-83a9-46f8-916d-21d1a2b4e062",
		"name": "PetStoreAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "list pets",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97be1e6a-eb05-414a-930d-bd85cb3eb568",
						"exec": [
							"/**",
							" * ",
							" */ ",
							"pm.test(\"Is valid response with json array in body\", function () {",
							"    ",
							"    // assert that the status code is 200",
							"    pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     ",
							"    // assert that the response has a valid JSON body",
							"    pm.response.to.be.withBody;",
							"     ",
							"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"     ",
							"    //make sure we have a valid json array",
							"    pm.expect(pm.response.json()).to.be.an('array').but.not.an('object');",
							"    ",
							"});",
							"",
							"pm.test(\"Has Content-Type header\", function () {",
							"    pm.expect(responseHeaders.hasOwnProperty(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Is response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"//https://www.chaijs.com/api/bdd/#method_a",
							"//pm.test('is valid Array', () => pm.expect(pm.response.json()).to.be.an('array').but.not.an('object'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pets"
					]
				}
			},
			"response": []
		},
		{
			"name": "add pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2987e653-1c08-4f37-a960-105116dc4df6",
						"exec": [
							"/**",
							" *  ",
							" */",
							"pm.test(\"Is valid response with json object in body\", function () {",
							"    ",
							"    // assert that the status code is 200",
							"    pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     ",
							"    // assert that the response has a valid JSON body",
							"    pm.response.to.be.withBody;",
							"     ",
							"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"     ",
							"    //make sure we have a valid json array",
							"    pm.expect(pm.response.json()).to.be.an('object').but.not.an('array');",
							"    ",
							"});",
							"",
							"pm.test(\"Has Content-Type header\", function () {",
							"    pm.expect(responseHeaders.hasOwnProperty(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Is message response equal sucess\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"success\");",
							"});",
							"",
							"pm.test(\"Is response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"type\":\"Lizzard\",\n\t\"price\": 3.50\n}"
				},
				"url": {
					"raw": "{{base_url}}/pets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pets"
					]
				}
			},
			"response": []
		},
		{
			"name": "get pet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9bce0715-8ea7-4685-84e1-78adb75cfd74",
						"exec": [
							"/**",
							" * ",
							" */",
							"pm.test(\"Is valid response with json object in body\", function () {",
							"    ",
							"    // assert that the status code is 200",
							"    pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     ",
							"    // assert that the response has a valid JSON body",
							"    pm.response.to.be.withBody;",
							"     ",
							"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"     ",
							"    //make sure we have a valid json array",
							"    pm.expect(pm.response.json()).to.be.an('object').but.not.an('array');",
							"    ",
							"});",
							"",
							"pm.test(\"Has Content-Type header\", function () {",
							"    pm.expect(responseHeaders.hasOwnProperty(\"Content-Type\"));",
							"});",
							"",
							"pm.test(\"Is response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"",
							"//https://www.chaijs.com/api/bdd/#method_a",
							"//pm.test('is valid Array', () => pm.expect(pm.response.json()).to.be.an('array').but.not.an('object'))",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pets/3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pets",
						"3"
					]
				}
			},
			"response": []
		}
	]
}